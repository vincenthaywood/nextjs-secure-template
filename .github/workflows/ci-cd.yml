name: CI/CD Pipeline with Enhanced Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # Security vulnerability scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Run npm audit (strict)
      run: npm audit --audit-level high
    
    - name: Security scan with Snyk
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

  # CodeQL security analysis
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        queries: security-and-quality
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Quality gates - lint, type-check, test
  quality-checks:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: TypeScript type checking
      run: npx tsc --noEmit
    
    - name: Run ESLint with security rules
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # Build verification
  build:
    runs-on: ubuntu-latest
    needs: [security-scan, quality-checks]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Check for sensitive files in build
      run: |
        echo "üîç Checking for sensitive files..."
        if grep -r "sk-" .next/ || grep -r "password" .next/ || grep -r "secret" .next/; then
          echo "‚ùå Sensitive data found in build!"
          exit 1
        else
          echo "‚úÖ No sensitive data detected in build"
        fi
    
    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: .next
        key: nextjs-build-${{ github.sha }}
        restore-keys: |
          nextjs-build-

  # Dependency vulnerability check
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for known vulnerable packages
      run: |
        echo "üîç Checking for known vulnerable packages..."
        npx audit-ci --moderate
    
    - name: License compliance check
      run: |
        echo "üìú Checking license compliance..."
        npx license-checker --onlyAllow 'MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;Unlicense'
      continue-on-error: true

  # Deployment readiness
  deployment-ready:
    runs-on: ubuntu-latest
    needs: [security-scan, codeql-analysis, quality-checks, build, dependency-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Security Deployment Check
      run: |
        echo "üîí All security checks passed!"
        echo "‚úÖ CodeQL analysis completed"
        echo "‚úÖ Dependency vulnerabilities checked"
        echo "‚úÖ Build security verified"
        echo "üöÄ Safe for production deployment"